<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head><link rel="stylesheet" type="text/css" href="../../_rhdefault.css"/></head><body id="i710910" class="topic concept" lang="en_US"><div class="breadcrumbs"><div><div><a href="">ThunderBird StormCluster System</a></div><div><a href="contents/topics/c-attribute-parameter-syntax">Attribute and parameter syntax</a></div></div></div><h1 class="title">Attribute and parameter syntax</h1><div class="shortdesc">Use attributes and parameters together in commands.</div><div class="p">An attribute and a parameter can co-exist in one command. Multiple attributes and multiple parameters can co-exist in a single command.</div><div class="p">General syntax guidelines for attribute parameters:<ul id="ul_qrw_xdm_mr" class="ul"><li class="li"><div class="p">Attributes and parameters can appear in any order after the command foundation, either attribute before parameter, or parameter before attribute.</div></li><li class="li"><div class="p">Sub-attributes are usually a scale of fixed measurements, for example the attribute severity takes the alarms scale sub-attributes of: all, minor, major, warning.</div></li><li class="li"><div class="p">Sub-attributes are applied as a group of possible choices to delimit an attribute or concatenated attributes.</div></li><li class="li"><div class="p">All possible expressions of a foundation class are in the Syntax section of the command.</div></li><li class="li"><div class="p">The order of attributes and parameters is in part defined by user choices and in part by the design structure of the CLI, to provide as much flexibility in access to information possible.</div></li></ul></div><h2 class="title">Syntax Examples</h2><div class="p">Reference example syntax for setting namespace qualifiers within an attribute. </div><code class="pre-white-space pre codeblock display-block">var currentPerformanceCounterCategory =  new System.Diagnostics.<br/><br/>
    PerformanceCounterCategory();<br/><br/></code><div class="p">Reference example syntax for initializing arrays on the declaration line.</div><code class="pre-white-space pre codeblock display-block">// Preferred syntax. Note that you cannot use var here instead of string[].  <br/><br/>
string[] vowels1 = {  &quot;a&quot;,  &quot;e&quot;,  &quot;i&quot;,  &quot;o&quot;,  &quot;u&quot; };<br/><br/>
<br/><br/>
 // If you use explicit instantiation, you can use var.  <br/><br/>
var vowels2 =  new  string[] {  &quot;a&quot;,  &quot;e&quot;,  &quot;i&quot;,  &quot;o&quot;,  &quot;u&quot; };<br/><br/>
<br/><br/>
 // If you specify an array size, you must initialize the elements one at a time.  <br/><br/>
var vowels3 =  new  string[5];<br/><br/>
vowels3[0] =  &quot;a&quot;;<br/><br/>
vowels3[1] =  &quot;e&quot;;<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/></code><div class="p">Reference example syntax for avoiding exceptions and increase performance by skipping unnecessary comparisons, use &amp;&amp; instead of &amp; and || instead of | when you perform comparisons.</div><code class="pre-white-space pre codeblock display-block">Console.Write(&quot;Enter a dividend: &quot;);<br/><br/>
 var dividend = Convert.ToInt32(Console.ReadLine());<br/><br/>
<br/><br/>
Console.Write( &quot;Enter a divisor: &quot;);<br/><br/>
 var divisor = Convert.ToInt32(Console.ReadLine());<br/><br/>
<br/><br/>
// If the divisor is 0, the second clause in the following condition  <br/><br/>
// causes a run-time error. The &amp;&amp; operator short circuits when the  <br/><br/>
// first expression is false. That is, it does not evaluate the  <br/><br/>
// second expression. The &amp; operator evaluates both, and causes   <br/><br/>
// a run-time error when divisor is 0.  <br/><br/>
<br/><br/>
if ((divisor != 0) &amp;&amp; (dividend / divisor &gt; 0))<br/><br/>
{<br/><br/>
    Console.WriteLine( &quot;Quotient: {0}&quot;, dividend / divisor);<br/><br/>
}<br/><br/>
 else<br/><br/>
{<br/><br/>
    Console.WriteLine( &quot;Attempted division by 0 ends up here.&quot;);<br/><br/>
}<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/></code></body></html>